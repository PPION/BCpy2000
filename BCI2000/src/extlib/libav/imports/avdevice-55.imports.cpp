// Import declarations for avdevice-55 library
// generated by C:\BCI2000.svn\build\buildutils\create_import_table.exe from win32-x86/dynamic/avdevice-55.dll
#if STATIC_LIBAVDEVICE_55

namespace Dylib { bool avdevice_55_Loaded() { return true; } }
extern "C" {
}

#else

#include "DylibImports.h"
namespace { extern const Dylib::Import* functionImports; }

// Here you may specify a custom error message to be displayed when the library cannot be found.
static const char* notFoundMsg = "";
// Here you may specify an URL to some local or remote help resource.
static const char* notFoundURL = "";
RegisterDylibWithAliases( avdevice_55, "avdevice-55", functionImports, notFoundMsg, notFoundURL );

extern "C" {

// NOTE: When loading the library, function bodies will be overwritten with absolute jumps
// to imported functions, i.e. function bodies must be roughly 2 * sizeof(void*) bytes long.
// A call to a member function with a pointer argument should be large enough.
// 
// In addition, having distinct function bodies for each function stub
// is important -- that makes it impossible for size optimizers to
// collapse them into a single definition.
//
void avdevice_configuration() { Dylib::avdevice_55.UninitializedFunctionExport( "avdevice_configuration" ); }
void avdevice_license() { Dylib::avdevice_55.UninitializedFunctionExport( "avdevice_license" ); }
void avdevice_register_all() { Dylib::avdevice_55.UninitializedFunctionExport( "avdevice_register_all" ); }
void avdevice_version() { Dylib::avdevice_55.UninitializedFunctionExport( "avdevice_version" ); }
}

namespace {
const Dylib::Import functionImports_[] =
{
  { "avdevice_configuration", (void**)&avdevice_configuration, Dylib::Import::functionStub },
  { "avdevice_license", (void**)&avdevice_license, Dylib::Import::functionStub },
  { "avdevice_register_all", (void**)&avdevice_register_all, Dylib::Import::functionStub },
  { "avdevice_version", (void**)&avdevice_version, Dylib::Import::functionStub },
  { 0, 0, 0 }
};
const Dylib::Import* functionImports = functionImports_;
}

#endif // STATIC_LIBAVDEVICE_55

