// Import declarations for cbsdk.h, generated by dylib_imports.sh
#ifndef cbsdk_IMPORTS_H
#define cbsdk_IMPORTS_H

#ifdef _WIN32
  #include "Win32Defs.h"
#endif // _WIN32
#include "cbhwlib.h"

#define cbSdkGetVersion cbSdkGetVersion_3f74
#define cbSdkReadCCF cbSdkReadCCF_3d44
#define cbSdkWriteCCF cbSdkWriteCCF_fbd4
#define cbSdkOpen cbSdkOpen_5227
#define cbSdkGetType cbSdkGetType_537c
#define cbSdkClose cbSdkClose_254e
#define cbSdkGetTime cbSdkGetTime_8732
#define cbSdkGetSpkCache cbSdkGetSpkCache_31ad
#define cbSdkGetTrialConfig cbSdkGetTrialConfig_307f
#define cbSdkSetTrialConfig cbSdkSetTrialConfig_c79b
#define cbSdkUnsetTrialConfig cbSdkUnsetTrialConfig_142c
#define cbSdkGetChannelLabel cbSdkGetChannelLabel_51d2
#define cbSdkSetChannelLabel cbSdkSetChannelLabel_deb2
#define cbSdkGetTrialData cbSdkGetTrialData_1503
#define cbSdkInitTrialData cbSdkInitTrialData_3801
#define cbSdkSetFileConfig cbSdkSetFileConfig_06c1
#define cbSdkGetFileConfig cbSdkGetFileConfig_58bb
#define cbSdkSetPatientInfo cbSdkSetPatientInfo_15b0
#define cbSdkInitiateImpedance cbSdkInitiateImpedance_58b2
#define cbSdkSendPoll cbSdkSendPoll_3639
#define cbSdkSendPacket cbSdkSendPacket_8b51
#define cbSdkSetSystemRunLevel cbSdkSetSystemRunLevel_1e00
#define cbSdkSetDigitalOutput cbSdkSetDigitalOutput_ef9a
#define cbSdkSetAnalogOutput cbSdkSetAnalogOutput_d6e4
#define cbSdkSetChannelMask cbSdkSetChannelMask_bfa8
#define cbSdkSetComment cbSdkSetComment_652b
#define cbSdkSetChannelConfig cbSdkSetChannelConfig_d5c8
#define cbSdkGetChannelConfig cbSdkGetChannelConfig_23fd
#define cbSdkGetFilterDesc cbSdkGetFilterDesc_a92d
#define cbSdkGetSampleGroupList cbSdkGetSampleGroupList_89b5
#define cbSdkGetTrackObj cbSdkGetTrackObj_7190
#define cbSdkGetVideoSource cbSdkGetVideoSource_ac73
#define cbSdkSetSpikeConfig cbSdkSetSpikeConfig_7e70
#define cbSdkGetSysConfig cbSdkGetSysConfig_155b
#define cbSdkSystem cbSdkSystem_f5eb
#define cbSdkRegisterCallback cbSdkRegisterCallback_4027
#define cbSdkUnRegisterCallback cbSdkUnRegisterCallback_c659
#define cbSdkAnalogToDigital cbSdkAnalogToDigital_0b70

#include "cbsdk.h"

#undef cbSdkGetVersion
#undef cbSdkReadCCF
#undef cbSdkWriteCCF
#undef cbSdkOpen
#undef cbSdkGetType
#undef cbSdkClose
#undef cbSdkGetTime
#undef cbSdkGetSpkCache
#undef cbSdkGetTrialConfig
#undef cbSdkSetTrialConfig
#undef cbSdkUnsetTrialConfig
#undef cbSdkGetChannelLabel
#undef cbSdkSetChannelLabel
#undef cbSdkGetTrialData
#undef cbSdkInitTrialData
#undef cbSdkSetFileConfig
#undef cbSdkGetFileConfig
#undef cbSdkSetPatientInfo
#undef cbSdkInitiateImpedance
#undef cbSdkSendPoll
#undef cbSdkSendPacket
#undef cbSdkSetSystemRunLevel
#undef cbSdkSetDigitalOutput
#undef cbSdkSetAnalogOutput
#undef cbSdkSetChannelMask
#undef cbSdkSetComment
#undef cbSdkSetChannelConfig
#undef cbSdkGetChannelConfig
#undef cbSdkGetFilterDesc
#undef cbSdkGetSampleGroupList
#undef cbSdkGetTrackObj
#undef cbSdkGetVideoSource
#undef cbSdkSetSpikeConfig
#undef cbSdkGetSysConfig
#undef cbSdkSystem
#undef cbSdkRegisterCallback
#undef cbSdkUnRegisterCallback
#undef cbSdkAnalogToDigital

extern "C" {
extern cbSdkResult ( *cbSdkGetVersion)(UINT32 nInstance, cbSdkVersion * version);
extern cbSdkResult ( *cbSdkReadCCF)(UINT32 nInstance, cbSdkCCF * pData, const char * szFileName, bool bConvert, bool bSend, bool bThreaded);
extern cbSdkResult ( *cbSdkWriteCCF)(UINT32 nInstance, cbSdkCCF * pData, const char * szFileName, bool bThreaded);
extern cbSdkResult ( *cbSdkOpen)(UINT32 nInstance, cbSdkConnectionType conType, cbSdkConnection con);
extern cbSdkResult ( *cbSdkGetType)(UINT32 nInstance, cbSdkConnectionType * conType, cbSdkInstrumentType * instType);
extern cbSdkResult ( *cbSdkClose)(UINT32 nInstance);
extern cbSdkResult ( *cbSdkGetTime)(UINT32 nInstance, UINT32 * cbtime);
extern cbSdkResult ( *cbSdkGetSpkCache)(UINT32 nInstance, UINT16 channel, cbSPKCACHE **cache);
extern cbSdkResult ( *cbSdkGetTrialConfig)(UINT32 nInstance, UINT32 * pbActive, UINT16 * pBegchan, UINT32 * pBegmask, UINT32 * pBegval, UINT16 * pEndchan, UINT32 * pEndmask, UINT32 * pEndval, bool * pbDouble, UINT32 * puWaveforms, UINT32 * puConts, UINT32 * puEvents, UINT32 * puComments, UINT32 * puTrackings, bool * pbAbsolute);
extern cbSdkResult ( *cbSdkSetTrialConfig)(UINT32 nInstance, UINT32 bActive, UINT16 begchan, UINT32 begmask, UINT32 begval, UINT16 endchan, UINT32 endmask, UINT32 endval, bool bDouble, UINT32 uWaveforms, UINT32 uConts, UINT32 uEvents, UINT32 uComments, UINT32 uTrackings, bool bAbsolute);
extern cbSdkResult ( *cbSdkUnsetTrialConfig)(UINT32 nInstance, cbSdkTrialType type);
extern cbSdkResult ( *cbSdkGetChannelLabel)(UINT32 nInstance, UINT16 channel, UINT32 * bValid, char * label, UINT32 * userflags, INT32 * position);
extern cbSdkResult ( *cbSdkSetChannelLabel)(UINT32 nInstance, UINT16 channel, const char * label, UINT32 userflags, INT32 * position);
extern cbSdkResult ( *cbSdkGetTrialData)(UINT32 nInstance, UINT32 bActive, cbSdkTrialEvent * trialevent, cbSdkTrialCont * trialcont, cbSdkTrialComment * trialcomment, cbSdkTrialTracking * trialtracking);
extern cbSdkResult ( *cbSdkInitTrialData)(UINT32 nInstance, cbSdkTrialEvent * trialevent, cbSdkTrialCont * trialcont, cbSdkTrialComment * trialcomment, cbSdkTrialTracking * trialtracking);
extern cbSdkResult ( *cbSdkSetFileConfig)(UINT32 nInstance, const char * filename, const char * comment, UINT32 bStart, UINT32 options);
extern cbSdkResult ( *cbSdkGetFileConfig)(UINT32 nInstance, char * filename, char * username, bool * pbRecording);
extern cbSdkResult ( *cbSdkSetPatientInfo)(UINT32 nInstance, const char * ID, const char * firstname, const char * lastname, UINT32 DOBMonth, UINT32 DOBDay, UINT32 DOBYear);
extern cbSdkResult ( *cbSdkInitiateImpedance)(UINT32 nInstance);
extern cbSdkResult ( *cbSdkSendPoll)(UINT32 nInstance, const char* appname, UINT32 mode, UINT32 flags, UINT32 extra);
extern cbSdkResult ( *cbSdkSendPacket)(UINT32 nInstance, void * ppckt);
extern cbSdkResult ( *cbSdkSetSystemRunLevel)(UINT32 nInstance, UINT32 runlevel, UINT32 locked, UINT32 resetque);
extern cbSdkResult ( *cbSdkSetDigitalOutput)(UINT32 nInstance, UINT16 channel, UINT16 value);
extern cbSdkResult ( *cbSdkSetAnalogOutput)(UINT32 nInstance, UINT16 channel, cbSdkWaveformData * wf, cbSdkAoutMon * mon);
extern cbSdkResult ( *cbSdkSetChannelMask)(UINT32 nInstance, UINT16 channel, UINT32 bActive);
extern cbSdkResult ( *cbSdkSetComment)(UINT32 nInstance, UINT32 rgba, UINT8 charset, const char * comment);
extern cbSdkResult ( *cbSdkSetChannelConfig)(UINT32 nInstance, UINT16 channel, cbPKT_CHANINFO * chaninfo);
extern cbSdkResult ( *cbSdkGetChannelConfig)(UINT32 nInstance, UINT16 channel, cbPKT_CHANINFO * chaninfo);
extern cbSdkResult ( *cbSdkGetFilterDesc)(UINT32 nInstance, UINT32 proc, UINT32 filt, cbFILTDESC * filtdesc);
extern cbSdkResult ( *cbSdkGetSampleGroupList)(UINT32 nInstance, UINT32 proc, UINT32 group, UINT32 *length, UINT32 *list);
extern cbSdkResult ( *cbSdkGetTrackObj)(UINT32 nInstance, char *name, UINT16 *type, UINT16 *pointCount, UINT32 id);
extern cbSdkResult ( *cbSdkGetVideoSource)(UINT32 nInstance, char *name, float *fps, UINT32 id);
extern cbSdkResult ( *cbSdkSetSpikeConfig)(UINT32 nInstance, UINT32 spklength, UINT32 spkpretrig);
extern cbSdkResult ( *cbSdkGetSysConfig)(UINT32 nInstance, UINT32 * spklength, UINT32 * spkpretrig, UINT32 * sysfreq);
extern cbSdkResult ( *cbSdkSystem)(UINT32 nInstance, cbSdkSystemType cmd);
extern cbSdkResult ( *cbSdkRegisterCallback)(UINT32 nInstance, cbSdkCallbackType callbacktype, cbSdkCallback pCallbackFn, void* pCallbackData);
extern cbSdkResult ( *cbSdkUnRegisterCallback)(UINT32 nInstance, cbSdkCallbackType callbacktype);
extern cbSdkResult ( *cbSdkAnalogToDigital)(UINT32 nInstance, UINT16 channel, const char * szVoltsUnitString, INT32 * digital);
}

namespace Dylib { bool cbsdk_Loaded(); }

#endif // cbsdk_IMPORTS_H
